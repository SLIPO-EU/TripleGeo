##############################
## Configuration for TripleGeo ver.1.7 in order to transform data from ESRI shapefiles into RDF triples on top of Apache Spark / GeoSpark.
## EXAMPLE COMMAND: java -cp target/triplegeo-1.7-SNAPSHOT.jar eu.slipo.athenarc.triplegeo.Extractor ./test/conf/shp_spark_options.conf
##############################

##############################
# Execution environment parameters
##############################

##Specify one of the following execution platforms: JVM (for single- or multi-threaded execution) or SPARK .
runtime = SPARK

##Number of data partitions. The input data file will be split into this number of partitions; each will be transformed separately.
partitions = 3

##Only when running over SPARK, optionally specify the level of logging. Possible values: ERROR, INFO, WARN .
spark_logger_level = WARN


##############################
# Input and output parameters (paths are RELATIVE to executable)
##############################

##Possible input formats: SHAPEFILE, DBMS, CSV, GPX, GEOJSON, XML, OSM
inputFormat = SHAPEFILE

##Conversion mode: specify either 'GRAPH' (on disk) or 'STREAM' (in-memory) or 'RML' (for applying user-specified RML mappings)
mode = STREAM

##Paths to directories and files used by the application
## CURRENTLY SUPPORTED: You can specify MULTIPLE input files (of exactly the same format and attributes) separating them by ';' in order to activate multiple concurrent threads for their transformation.
tmpDir = ./tmp
inputFiles = ./test/data/points.shp
outputDir = ./test/output

## OPTIONAL parameter for the encoding (character set) for strings in the input data. If not specified, UTF-8 encoding is assumed.
encoding = UTF-8

##Possible export formats: RDF/XML (default), RDF/XML-ABBREV, N-TRIPLES, TURTLE (or TTL), N3
serialization = N-TRIPLES

## Specify the spatial ontology for geometries in the exported data. 
## Possible values: 1) GeoSPARQL, 2) Virtuoso (legacy RDF ontology for points only), 3) wgs84_pos (for WGS84 Geoposition RDF vocabulary)
targetGeoOntology = GeoSPARQL


##############################
## Mapping specification 
##############################

##File (in TTL or YML format) specifying mappings of the input attribute schema to RDF properties; i.e., prescribing how input features will be transformed into RDF triples (typically according to an ontology).
##OPTION #1: File (in TURTLE format) containing RML mappings from input schema to RDF (ONLY applicable in RML conversion mode; Leave blank if non applicable.)
##OPTION #2: File (in YML format) containing mappings from input schema to RDF (ONLY applicable in GRAPH or STREAM conversion modes; Leave blank if non applicable.)
mappingSpec = ./test/conf/points_mappings.yml
#mappingSpec = ./test/conf/points_mappings.ttl


##############################
## Classification scheme 
##############################

## File (either in CSV or YML format) containing a classification hierarchy in categories assigned to input features. Classification is only applied if a suitable mapping (including a category attribute) has been specified above. Leave blank if non applicable.
classificationSpec = ./test/classification/points_sample_classification.csv

## Boolean parameter specifying whether the data features specify their category based on its identifier in the classification scheme (false) or the actual name of the category (true). 
## By default, transformation uses identifiers of categories in the classification scheme. This parameter has no effect if no classification hierarchy is specified.
classifyByName = true


##############################
# Data parameters (CASE-sensitive for shapefiles!!!)
# Change parameters to reflect the shapefile contents that will be extracted
##############################
attrKey = osm_id
attrGeometry = the_geom
attrName = name
attrCategory = type


##############################
#Namespaces parameters
##############################
## MANDATORY parameter that specifies the data source provider of the input features
featureSource = OSM_sample_points

##OPTIONAL parameters regarding namespaces of generated URIs:
nsOntology = http://slipo.eu/def#
nsGeometry = http://www.opengis.net/ont/geosparql#
nsFeatureURI = http://slipo.eu/id/poi/
nsClassURI = http://slipo.eu/id/term/
nsClassificationURI = http://slipo.eu/id/classification/
nsDataSourceURI = http://slipo.eu/id/poisource/

## Specify two lists (of comma separated values) with the correspondence between a prefix and its respective namespace (mainly used in attribute mappings)
prefixes = slipo, geo, xsd, rdfs, wgs84_pos
namespaces = http://slipo.eu/def#, http://www.opengis.net/ont/geosparql#, http://www.w3.org/2001/XMLSchema#, http://www.w3.org/1999/02/22-rdf-syntax-ns#, http://www.w3.org/2003/01/geo/wgs84_pos#

##############################
# Spatial Reference parameters
##############################
# Optional parameters. These fields should be filled in if a transformation between EPSG reference systems is needed
# If not specified, geometries are assumed in WGS84 reference system (EPSG:4326).
#sourceCRS = EPSG:2100
#targetCRS = EPSG:4326

##############################
# Other parameters (optional)
##############################
# OPTIONAL parameter. Default language tag for string literals created in the output RDF. By default, the value will be English-en.
defaultLang = en
