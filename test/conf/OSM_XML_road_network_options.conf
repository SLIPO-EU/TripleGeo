##############################
## Configuration for TripleGeo ver.2.0 in order to transform road network data from OpenStreetMap XML files into RDF triples.
## In execution, depending on the dataset size you should allocate enough memory to JVM in order to boost performance; otherwise, TripleGeo would rely on disk-based indexing and may run less efficiently.
## EXAMPLE COMMAND: java -Xmx2g -cp target/triplegeo-2.0-SNAPSHOT.jar eu.slipo.athenarc.triplegeo.Extractor ./test/conf/OSM_XML_road_network_options.conf
##############################

##############################
# Input and output parameters (paths are RELATIVE to executable)
##############################

##Possible input formats: SHAPEFILE, DBMS, CSV, GPX, GEOJSON, XML, OSM_XML, OSM_PBF, JSON
inputFormat = OSM_XML

##Conversion mode: specify either 'GRAPH' (on disk) or 'STREAM' (in-memory); 'RML' not currently applicable on OSM XML datasets.
mode = STREAM

##Paths to directories and files used by the application
##CURRENTLY SUPPORTED: You can specify MULTIPLE input files (of exactly the same format and attributes) separating them by ';' in order to activate multiple concurrent threads for their transformation.
tmpDir = ./tmp
inputFiles = ./test/data/latest.osm
outputDir = ./test/output

##Possible export formats: RDF/XML (default), RDF/XML-ABBREV, N-TRIPLES, TURTLE (or TTL), N3
serialization = N-TRIPLES

## Specify the spatial ontology for geometries in the exported data. 
## Possible values: 1) GeoSPARQL, 2) Virtuoso (legacy RDF ontology for points only), 3) wgs84_pos (for WGS84 Geoposition RDF vocabulary)
targetGeoOntology = GeoSPARQL

##############################
## Mapping specification 
##############################

## If a mapping file is not specified for OSM XML/PBF files or it contains only the URI definition pattern, 
## then an RDF property will be created for each thematic attribute (tag) in the original schema, by borrowing the tag key as its name. 
mappingSpec = ./test/conf/OSM_road_network_mappings_XML_PBF.yml


##############################
## Classification scheme 
##############################

## File (in YML format) containing classification hierarchy of categories.
## In case of converting OSM XML data (either in GRAPH or STREAM conversion mode), this YML file can specify classification of features into categories according to their respective OSM tags.
## Based on OSM tags detected for each transformed entity, a "category" property is created and added to the result.
classificationSpec = ./test/classification/OSM_road_network_classification_tags.yml


##############################
# Data parameters
# Change parameter values to reflect the contents that will be extracted from the input file.
##############################
attrKey = osm_id
attrName = name
attrCategory = category

## Specify whether a .CSV file will be also extracted for registering features in the SLIPO Registry. 
## Each record in the resulting .CSV file will include information extracted from the basic attributes specified in the previous parameters.
registerFeatures = true

##############################
#Namespaces parameters
##############################
## MANDATORY parameter that specifies the data source provider of the input features
featureSource=OpenStreetMap

##OPTIONAL parameters regarding namespaces of generated URIs:
nsOntology = https://wiki.openstreetmap.org/Key:
nsGeometry = http://www.opengis.net/ont/geosparql#
nsFeatureURI = http://openstreetmap.org/
nsClassURI = http://slipo.eu/id/term/
nsClassificationURI = http://slipo.eu/id/classification/
nsDataSourceURI = http://slipo.eu/id/poisource/

## Specify two lists (of comma separated values) with the correspondence between a prefix and its respective namespace (mainly used in attribute mappings)
prefixes = slipo, osm, geo, xsd, rdfs, wgs84_pos
namespaces = http://slipo.eu/def#, https://wiki.openstreetmap.org/Key:, http://www.opengis.net/ont/geosparql#, http://www.w3.org/2001/XMLSchema#, http://www.w3.org/1999/02/22-rdf-syntax-ns#, http://www.w3.org/2003/01/geo/wgs84_pos#

##############################
# Spatial Reference parameters
##############################
# Optional parameters. These fields should be filled in if a transformation between EPSG reference systems is needed.
# If not specified, geometries are assumed in WGS84 reference system (EPSG:4326). typically, for OSM data, no transformation is needed, because all input geometries must be in WGS84 reference system (EPSG:4326).
#sourceCRS = EPSG:4326
#targetCRS = EPSG:2100


##############################
# Other parameters (optional)
##############################
# OPTIONAL parameter. Default language tag for string literals created in the output RDF. By default, the value will be English-en.
defaultLang = en
