URI:                                     ##SLIPO-specific constraint: Specifies a URI of each POI; If needed, extra attribute "DATA_SOURCE" is used for constructing these URIs                
  entity: uri
  generateWith: getUUID(DATA_SOURCE,osm_id)    ## getUUID(osm_id)     ## keepOriginalID(osm_id)    ## ##Function call to generate URI
osm_id:
  partOf: sourceInfo
  entity: source
  predicate: slipo:poiRef
DATA_SOURCE:                      ##SLIPO-specific constraint: Specifies the data source provider of each POI; Assuming that extra attribute "DATA_SOURCE" generated by TripleGeo is always used for constructing the URIs for data sources
  partOf: sourceInfo
  entity: source
  predicate: slipo:sourceRef
  generateWith: getDataSource     ##Function call to fill-in this value that does NOT exist in the original dataset
CATEGORY_URI:                     ##SLIPO-specific constraint: Specifies the URI for the category assigned to each POI; Assuming that extra attribute "CATEGORY_URI" generated by TripleGeo is always used for constructing the URIs for categories
  entity: category
  predicate: slipo:category
  datatype: uri
ASSIGNED_CATEGORY:                 ##SLIPO-specific constraint: Specifies an internal category assigned to each POI; Assuming that a mapping to a default (embedded) classification scheme
  entity: assignedCategory
  predicate: slipo:assignedCategory
  generateWith: getEmbeddedCategory  
name:
  instanceOf: name
  entity: name
  predicate: slipo:name
  type: official
  language: en
timestamp:
  entity: lastUpdated
  predicate: slipo:lastUpdated
  datatype: timestamp
GEOHASH:
  entity: geohash
  predicate: slipo:geoHash
  datatype: string
  generateWith: geometry.getGeoHash(10)          ##Function call to fill-in this value that does NOT exist in the original dataset   
LONGITUDE:
  entity: lon
  predicate: wgs84_pos:long
  datatype: float
  generateWith: geometry.getLongitude           ##Function call to fill-in this value that does NOT exist in the original dataset 
LATITUDE:
  entity: lat
  predicate: wgs84_pos:lat
  datatype: float
  generateWith: geometry.getLatitude            ##Function call to fill-in this value that does NOT exist in the original dataset 
TRANSLIT:                                       ##Extra property: generate names transliterated to Latin characters
  instanceOf: name
  entity: translit_name
  predicate: slipo:name
  type: transliterated
  language: en
  generateWith: getTransliteration(name)         ##Function call to fill-in this value that does NOT exist in the original dataset   
