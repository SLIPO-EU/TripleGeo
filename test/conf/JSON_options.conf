##############################
## Configuration for TripleGeo ver.1.9 in order to transform data from JSON files into RDF triples.
## EXAMPLE COMMAND: java -Xmx2g -cp target/triplegeo-1.9-SNAPSHOT.jar eu.slipo.athenarc.triplegeo.Extractor ./test/conf/JSON_options.conf
##############################

##############################
# Input and output parameters (paths are RELATIVE to executable)
##############################

## Possible input formats: SHAPEFILE, DBMS, CSV, GPX, GEOJSON, XML, OSM_XML, OSM_PBF, JSON
inputFormat = JSON

## Conversion mode: specify either 'GRAPH' (on disk) or 'STREAM' (in-memory)
mode = STREAM

## Paths to directories and files used by the application
## CURRENTLY SUPPORTED: You can specify MULTIPLE input files (of exactly the same format and attribute schema) separating them by ';' in order to activate multiple concurrent threads for their transformation.
tmpDir = ./tmp
inputFiles = ./test/data/sample.json
outputDir = ./test/output/

## OPTIONAL parameter for the encoding (character set) for strings in the input data. If not specified, UTF-8 encoding is assumed.
encoding = UTF-8

## Possible export formats: RDF/XML (default), RDF/XML-ABBREV, N-TRIPLES, TURTLE (or TTL), N3
serialization = N-TRIPLES

## Specify the spatial ontology for geometries in the exported data. 
## Possible values: 1) GeoSPARQL, 2) Virtuoso (legacy RDF ontology for points only), 3) wgs84_pos (for WGS84 Geoposition RDF vocabulary)
targetGeoOntology = GeoSPARQL


##############################
## Mapping specification 
##############################

##File (only in YML format for GeoJSON files) containing mappings from input schema to RDF (ONLY applicable in GRAPH or STREAM conversion modes; Leave blank if non applicable.)
##If this parameter is left blank, then an RDF property will be created (with the same name) for each attribute in the original schema. 
mappingSpec = ./test/conf/JSON_slipo_mappings.yml


##############################
## Classification scheme 
##############################

## File (either in CSV or YML format) containing a classification hierarchy in categories assigned to input features. Classification is only applied if a suitable mapping (including a category attribute) has been specified above. Leave blank if non applicable.
classificationSpec = ./test/classification/JSON_sample_classification.csv

## Boolean parameter specifying whether the data features specify their category based on its identifier in the classification scheme (false) or the actual name of the category (true). 
## By default, transformation uses identifiers of categories in the classification scheme. This parameter has no effect if no classification hierarchy is specified.
classifyByName = false

##############################
# Data parameters (CASE-insensitive)
# Change parameters to reflect the shapefile contents that will be extracted
##############################
attrKey = ID
attrName = UUID
attrCategory = StatusTypeID
attrX= AddressInfo.Longitude
attrY= AddressInfo.Latitude

## Specify whether a .CSV file will be also extracted for registering features in the SLIPO Registry. 
## Each record in the resulting .CSV file will include information extracted from the basic attributes specified in the previous parameters.
registerFeatures = true


##############################
# Namespaces parameters
##############################
## MANDATORY parameter that specifies the data source provider of the input features
featureSource=OpenChargeMap

##OPTIONAL parameters regarding namespaces of generated URIs:
nsOntology = http://slipo.eu/def#
nsGeometry = http://www.opengis.net/ont/geosparql#
nsFeatureURI = https://openchargemap.org/site/poi/details/
nsClassURI = http://slipo.eu/id/term/
nsClassificationURI = http://slipo.eu/id/classification/
nsDataSourceURI = http://slipo.eu/id/poisource/

## Specify two lists (of comma separated values) with the correspondence between a prefix and its respective namespace (mainly used in attribute mappings)
prefixes = slipo, geo, xsd, rdfs, wgs84_pos
namespaces = http://slipo.eu/def#, http://www.opengis.net/ont/geosparql#, http://www.w3.org/2001/XMLSchema#, http://www.w3.org/1999/02/22-rdf-syntax-ns#, http://www.w3.org/2003/01/geo/wgs84_pos#


##############################
# Spatial Reference parameters
##############################
# Optional parameters. These fields should be filled in if a transformation between EPSG reference systems is needed
# If not specified, geometries are assumed in WGS84 reference system (EPSG:4326).
#sourceCRS = EPSG:4326
#targetCRS = EPSG:4326


##############################
# Other parameters (optional)
##############################
# OPTIONAL parameter. Default language tag for string literals created in the output RDF. By default, the value will be English-en.
defaultLang = en