##############################
## Template for configuring TripleGeo ver.1.9 in order to transform data from geographical files into RDF triples.
## Specify parameters according to the examples for your specific input file(s).
##############################

##############################
# Execution environment parameters
##############################

##Specify one of the following execution platforms:
##     JVM (for single- or multi-threaded execution; this is the DEFAULT value);
##     SPARK .
#runtime = JVM
runtime = ${runtime}

##Number of data partitions. The input data file will be split into this number of partitions; each will be transformed separately.
#partitions = 3
partitions = ${partitions}

##Only when running over SPARK, optionally specify the level of logging:
##     ERROR ;
##     INFO ;
##     WARN .
#spark_logger_level = WARN
spark_logger_level = ${spark_logger_level}


##############################
## Input and output parameters 
##############################

## Specify format for the input geographical file(s): 
## Supported input file formats: 
##     SHAPEFILE ; 
##     CSV ;
##     GPX ;
##     GEOJSON ;
##     XML (for handling XML/GML/KML/INSPIRE-aligned input);
##     OSM_XML (supporting OpenStreetMap XML format);
##     OSM_PBF (supporting OpenStreetMap PBF format);
##     JSON .
#inputFormat = SHAPEFILE
inputFormat = ${inputFormat}

## Conversion mode: Specify one of the following:
##    GRAPH (on disk);
##    STREAM (in-memory);
##    RML (for applying user-specified RML schema mappings);
##    XSLT (for handling XML/GML/KML/INSPIRE-aligned input).
#mode = STREAM
mode = ${mode}

## Local paths to directories and files used during processing (all paths are RELATIVE to executable)
## CURRENTLY SUPPORTED: You can specify MULTIPLE input files (of exactly the same format and attribute schemata) separating them by ';' in order to activate multiple concurrent threads for their transformation.
#inputFiles = ./test/data/points.shp
inputFiles = ${inputFiles}

## Directory where the output RDF file(s) will be stored. By default, the output file name(s) are automatically composed from the original file name(s) with the extension of the respective RDF serialization, e.g., points.nt. Files with the same name found in the output directory will be overwritten.
#outputDir = ./test/output
outputDir = ${outputDir}

## Path to a directory where intermediate files may be temporarily written during transformation.
#tmpDir = ./tmp
tmpDir = ${tmpDir}


## OPTIONAL parameter. Number of input features to transform in each batch before storing output to file. 
batchSize = 10

## OPTIONAL parameter for the encoding (character set) for strings in the input data. If not specified, UTF-8 encoding is assumed.
#encoding = ISO-8859-1
#encoding = ISO-8859-7
#encoding = WINDOWS-1253
#encoding = UTF-8
encoding = ${encoding}

## MANDATORY for CSV input only (case-insensitive): specify the character delimiting attribute values; Omit for any other formats of input datasets.
delimiter = |

## MANDATORY for CSV input only (case-insensitive): specify quote character for string values; Omit for any other formats of input datasets.
quote = "

## Specify export serialization for the output file.
## Possible export formats: 
##   RDF/XML (used as default for the XSLT conversion mode);
##   RDF/XML-ABBREV ;
##   N-TRIPLES (used as default for the STREAM and RML conversion modes);
##   TURTLE (or TTL);
##   N3.
#serialization = N-TRIPLES
serialization = ${serialization}

## Specify the spatial ontology for geometries in the exported data.
## Possible values: 
##    GeoSPARQL (according to the OGC standard);
##    Virtuoso (legacy RDF ontology for points features only in Virtuoso RDF namespace);
##    wgs84_pos (for WGS84 Geoposition RDF vocabulary).
#targetGeoOntology = GeoSPARQL
targetGeoOntology = ${outputSpatialOntology}



##############################
## Mapping specification 
##############################

##File (in TTL, YML, or XSL format) specifying mappings of the input attribute schema to RDF properties; i.e., prescribing how input features will be transformed into RDF triples (typically according to an ontology).
mappingSpec = ${mappingSpec}
 
##OPTION #1 for RML transformation mode: File (in TURTLE format) containing RML mappings from input schema to RDF. In RML mode, specifying mappings with this file is MANDATORY, otherwise no RDF triples will be produced.
#mappingSpec = ./test/conf/osm_points_shp.ttl

##OPTION #2 for GRAPH or STREAM transformation modes: File (in YML format) containing mappings from input schema to RDF according to a custom ontology. In GRAPH/STREAM modes, this parameter is OPTIONAL. If left blank or omitted, then an RDF property will be created for each thematic attribute in the original schema, by borrowing its attribute name. 
#mappingSpec = ./test/conf/OSM_slipo_mappings.yml

##OPTION #3 for XSLT transformation mode: File with an XSL schema mapping for attributes to be converted. MANDATORY for XSLT transformation mode, otherwise no RDF triples will be produced.
#mappingSpec = ./xslt/Metadata2RDF.xsl



##############################
## Classification scheme 
##############################

## File (either in CSV or YML format) containing a classification hierarchy in categories assigned to input features. Classification is only applied if a suitable mapping (including a category attribute) has been specified above. Leave blank if non applicable.
classificationSpec = ${classificationSpec}

##OPTION #1: A user-prepared CSV file prescribing a classification scheme that is employed in assigning categories, subcategories, etc. to each feature in the input dataset. Attributes in this CSV file must be delimited with comma (',') and string values must be enclosed with double-quotes (e.g., "Restaurant").
##           Every item in the classification scheme must be defined with a unique identifier and name (e.g., 29,"RESTAURANT"). Each line of the CSV file specifies a full path from a top-tier category to a bottom-level subcategory. E.g.: 5,"FOOD",29,"RESTAURANT".
#classificationSpec = ./test/conf/OSM_POI_sample_classification.csv

##OPTION #2: A user-prepared YML file with indentations used to denote breakdown of a given category into subcategories (i.e., two blank characters in the beginning of a line at each extra level in the hierarchy).
##           The identifier of each catagory (at any level) is specified after its name and it is preceded with a '#' character, e.g., 
#classificationSpec = ./test/conf/OSM_POI_sample_classification.yml

##OPTION #3: In case of converting OSM XML data in either GRAPH or STREAM transformation modes, a YML file should specify classification of features into categories according to their respective OSM tags.
#classificationSpec = ./test/conf/osm_xml_tags_classification.yml


## Boolean parameter specifying whether the data features specify their category based on its identifier in the classification scheme (false) or the actual name of the category (true). 
## By default, transformation uses identifiers of categories in the classification scheme. This parameter has no effect if no classification hierarchy is specified.
classifyByName = true



##############################
## Attribute data parameters (ONLY applicable in either GRAPH or STREAM conversion modes).
## Specified parameter values are CASE-sensitive for shapefiles!!!
## Change parameter values to reflect the contents that will be extracted from the input file.
##############################

## MANDATORY field name containing unique identifier for each entity (e.g., each record in the shapefile).
#attrKey = osm_id
attrKey = ${resourceIdentityAttribute}

## Parameter that specifies the name of the geometry column in the input dataset. Omit this parameter if geometry representation is available with columns specifying X,Y coordinates for points; otherwise, this parameter is MANDATORY.
#attrGeometry = geom
attrGeometry = ${resourceGeometryAttribute}

## MANDATORY for CSV input only (case-insensitive): specify attribute holding X-coordinates (or longitude) of point locations. Omit this parameter for other input formats, provided that a geometry attribute has been specified.
#attrX = lon
attrX = ${resourceLongitudeAtribute}

## MANDATORY for CSV input only (case-insensitive): specify attribute holding Y-coordinates (or latitude) of point locations. Omit this parameter for other input formats, provided that a geometry attribute has been specified.
#attrY = lat
attrY = ${resourceLatitudeAtribute}

## OPTIONAL field name containing name literals (i.e., strings). Applicable when such values are used for registering features in the SLIPO Registry. Leave blank if non applicable.
#attrName = name
attrName = ${resourceNameAttribute}

## OPTIONAL field name containing literals regarding classification into categories (e.g., type of points, road classes etc.) for each feature. Applicable when such values are used for registering features in the SLIPO Registry. Leave blank if non applicable.
#attrCategory = type
attrCategory = ${resourceCategoryAttribute}


## OPTIONAL spatial filter to select for transformation only input geometries contained within the specified region.
## Region must be a valid WKT closed geometry (polygon or multipolygon).
#spatialExtent=POLYGON((-5.71 50.037, -5.48 50.037, -5.48 50.19, -5.71 50.19, -5.71 50.037))
spatialExtent= ${spatialExtent}

## OPTIONAL thematic filter (SQL-like logical expression) to select input features based on their (case-sensitive) values on specific attributes.
## Numeric values must also be quoted in these expressions! Comparison operators: =, <>, <, <=, >, >=, LIKE.
#filterSQLCondition = (type='bus_stop') AND (name LIKE 'Maj?r%n')
filterSQLCondition = ${thematicFilter}

## OPTIONAL boolean parameter denoting whether a .CSV file will be also extracted specifically for registering features in the SLIPO Registry. Omit if non applicable.
## Each record in the resulting .CSV file will include information extracted from the basic attributes specified in the previous parameters.
registerFeatures = false 



##############################
## Namespaces parameters (ONLY applicable in either GRAPH or STREAM conversion modes)
## Change these parameters if you want to use different values for the namespaces and prefixes
##############################

## MANDATORY parameter that specifies the data source provider of the input features
#featureSource=OpenStreetMap
featureSource= ${featureSource}


##OPTIONAL parameters regarding namespaces of generated URIs.

##Specify the namespace of the underlying ontology. Used in creating properties for the RDF triples. 
#nsOntology = http://slipo.eu/def#
nsOntology = ${nsOntology}

##Specify the namespace for the underlying geospatial ontology
#nsGeometry = http://www.opengis.net/ont/geosparql#
nsGeometry = ${nsGeometry}

##Specify the common URI namespace for all generated resources
#nsFeatureURI = http://slipo.eu/id/poi/
nsFeatureURI = ${nsFeatureURI}

##Specify the common URI namespace for the classification scheme 
#nsClassificationURI = http://slipo.eu/id/classification/
nsClassificationURI = ${nsClassificationURI}

##Specify the common URI namespace for categories used in the classification scheme
#nsClassURI = http://slipo.eu/id/term/
nsClassURI = ${nsClassURI}

##Specify the common URI namespace for the data source provider
#nsDataSourceURI = http://slipo.eu/id/poisource/
nsDataSourceURI = ${nsDataSourceURI}

## Specify two lists (of comma separated values) with the correspondence between a prefix and its respective namespace (mainly used in attribute mappings)
prefixes = slipo, geo, xsd, rdfs, wgs84_pos
namespaces = http://slipo.eu/def#, http://www.opengis.net/ont/geosparql#, http://www.w3.org/2001/XMLSchema#, http://www.w3.org/1999/02/22-rdf-syntax-ns#, http://www.w3.org/2003/01/geo/wgs84_pos#



###############################
## Spatial Reference parameters
###############################
## Optional parameters. These parameters should be filled in case that a transformation between EPSG spatial reference systems is required.
## Comment both properties if geometries are assumed in WGS84 reference system (EPSG:4326).
#sourceCRS = EPSG:2100
#targetCRS = EPSG:4326
sourceCRS = ${sourceEPSG}
targetCRS = ${targetEPSG}



##############################
## Other parameters (ONLY applicable in either GRAPH or STREAM conversion modes)
##############################
# OPTIONAL parameter. Default language tag for string literals created in the output RDF. By default, the value will be English-en.
defaultLang=en

